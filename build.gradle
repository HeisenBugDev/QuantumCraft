// this part adds in ForgeGradle
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.1-SNAPSHOT'
    }
}

apply plugin: "forge"

dependencies {
    compile fileTree(dir: 'mcrun/mods', include: '**')
    compile fileTree(dir: 'libs', include: '*.jar')
}

// stuff specific to my mod
group = 'QuantumCraft.textures'
archivesBaseName = 'QuantumCraft'

minecraft {
  version = "1.7.2-10.12.0.1029" // grab latest forge
  assetDir = "run/assets"
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getBranch()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// add some stuff to the versio
ext.rawVersion = getVersionName()
version = "${minecraft.version}-$rawVersion.${System.getenv().BUILD_NUMBER}"
logger.lifecycle "version = $version"

processResources
{
  // replace stuff in text files, not binary ones.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.lang'
        include '**/*.info'

    // replace version and MCVersion
    // forge version is also accessible via project.minecraftforgeVersion
    // it contains the full minecraft version, including buildNumber
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

  // copy everything else, thats not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.lang'
        exclude '**/*.info'
    }
}

repositories {
  mavenCentral()
}

// change the name of my obfuscated jar
jar {
  appendix = 'universal'
}

// add a source jar
task sourceJar(type: Jar) {
  from sourceSets.main.allSource
  appendix = 'src'
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
  appendix = 'javadoc'
  from 'build/docs/javadoc'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
  from sourceSets.main.output
  appendix = 'deobf'
}

def jsonFile = new File(jar.destinationDir, "manifest.json")
task generateJson() { task ->
  def gitBranch = getBranch()

  // specify inputs and outputs so gradle can see if its upToDate
  task.inputs.with {
    property 'version', project.version // accounts for MCVersion, and all the other components
    property 'branch', gitBranch
    property 'obf', jar.archiveName
    property 'deobf', deobfJar.archiveName
    property 'source', sourceJar.archiveName
    property 'javadoc', javadocJar.archiveName
  }
  task.outputs.file(jsonFile)

  // actual work here
  task.doLast {
    def builder = new groovy.json.JsonBuilder()
    def root = builder {
      'build' System.getenv().BUILD_NUMBER
      'minecraft_version' project.minecraft.version
      'mod_version' project.rawVersion
      'branch' gitBranch
      'artifacts'([
        ['universal' : jar.archiveName ],
        ['deobf' : deobfJar.archiveName ],
        ['source' : sourceJar.archiveName ],
        ['javadoc' : deobfJar.archiveName ]
      ])
    }

    jsonFile.write groovy.json.JsonOutput.prettyPrint(builder.toString())
  }
}

// another obf jar
//task obfJar(type: Jar) {
//  from sourceSets.main.output
//  appendix = 'obfAgain'
//}

//reobf
//{
//  reobf obfJar
//}

artifacts {
  archives sourceJar
  archives deobfJar
  archives javadocJar
  //archives obfJar
  archives(jsonFile) { builtBy generateJson }
}
